{
  "issue_type": "infinite_loop_stage_progression",
  "timestamp": "2025-07-07T16:42:00Z",
  "location": {
    "primary_file": "/Users/greghogue/Lyra New/lyra-ai-mentor/src/components/lesson/chat/lyra/maya/LyraNarratedMayaSideBySideComplete.tsx",
    "related_files": [
      "/Users/greghogue/Lyra New/lyra-ai-mentor/src/components/lesson/chat/lyra/maya/hooks.ts",
      "/Users/greghogue/Lyra New/lyra-ai-mentor/src/components/lesson/chat/lyra/maya/stages.tsx"
    ]
  },
  "root_cause_analysis": {
    "symptom": "Narrative messages in Maya's stage 1 repeat infinitely",
    "mechanism": "Message processing recursion without proper completion handling",
    "critical_code_sections": [
      {
        "file": "hooks.ts",
        "lines": "107-112",
        "issue": "Recursive processMessages call without checking if processing is already complete",
        "code_snippet": "typeMessage(message, () => {\n  if (isInitializedRef.current) {\n    processMessages(messages, typeMessage, setVisibleMessages, index + 1);\n  }\n});"
      },
      {
        "file": "LyraNarratedMayaSideBySideComplete.tsx", 
        "lines": "112-140",
        "issue": "useEffect cleanup and re-initialization pattern may cause multiple message processing",
        "code_snippet": "useEffect(() => {\n  isInitializedRef.current = false;\n  clearMessages();\n  clearTypewriter();\n  ...\n  setTimeout(() => {\n    initializeProcessing();\n    if (stage.narrativeMessages && stage.narrativeMessages.length > 0) {\n      processMessagesWithDeps(stage.narrativeMessages);\n    }\n  }, 300);\n}, [currentStageIndex, stages, ...]);"
      }
    ]
  },
  "infinite_loop_pattern": {
    "step1": "Stage 1 loads with 3 narrative messages",
    "step2": "processMessages starts with index 0",
    "step3": "typeMessage completes for message at index 0",
    "step4": "Callback triggers processMessages(messages, typeMessage, setVisibleMessages, 1)",
    "step5": "Process continues until all 3 messages are typed",
    "step6": "Something triggers re-render or state change",
    "step7": "Messages get re-processed from beginning, creating infinite loop"
  },
  "potential_triggers": [
    {
      "trigger": "blur_clear_trigger",
      "location": "stages.tsx line 102",
      "message_id": "intro-maya-3",
      "effect": "Changes panelBlurLevel state which might trigger re-render"
    },
    {
      "trigger": "dependency_array_issue",
      "location": "LyraNarratedMayaSideBySideComplete.tsx line 140", 
      "dependencies": "[currentStageIndex, stages, clearMessages, clearTypewriter, initializeProcessing, processMessagesWithDeps]",
      "issue": "stages array is recreated on every render due to useMemo dependencies"
    },
    {
      "trigger": "missing_completion_flag",
      "details": "No flag to indicate that narrative messages for current stage have been fully processed"
    }
  ],
  "state_flow": {
    "involved_states": [
      "currentStageIndex",
      "visibleMessages",
      "typedContent", 
      "isTyping",
      "panelBlurLevel",
      "isInitializedRef"
    ],
    "state_transitions": [
      "Initial: currentStageIndex=0, panelBlurLevel='full'",
      "Messages start typing",
      "blur-clear trigger fires: panelBlurLevel='clear'",
      "Possible re-render due to state change",
      "useEffect fires again despite currentStageIndex unchanged"
    ]
  },
  "fix_recommendations": [
    {
      "priority": "HIGH",
      "fix": "Add completion tracking to prevent re-processing",
      "implementation": "Track completed message IDs or add stage completion flag"
    },
    {
      "priority": "HIGH", 
      "fix": "Fix processMessages boundary check",
      "implementation": "Ensure processMessages properly handles when all messages are complete"
    },
    {
      "priority": "MEDIUM",
      "fix": "Stabilize stages array creation",
      "implementation": "Move stages creation outside of component or memoize more carefully"
    },
    {
      "priority": "MEDIUM",
      "fix": "Review useEffect dependencies",
      "implementation": "Ensure useEffect only fires when currentStageIndex actually changes"
    }
  ]
}