import React, { useState, useEffect, useRef } from 'react';
import { Heart, ChevronRight, Check, Sparkles, Volume2, Target, Users, Mail, ArrowLeft, MessageCircle, Zap, Eye, Star, FastForward, X } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { LyraAvatar } from '@/components/LyraAvatar';
import { cn } from '@/lib/utils';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { SaveToToolkit } from '@/components/lesson/chat/lyra/maya/SaveToToolkit';
import { useAuth } from '@/contexts/AuthContext';
import { MayaAIEmailService } from '@/services/mayaAIEmailService';
import '@/styles/minimal-ui.css';

// Types for chat messages with Lyra's unified narrative structure
interface LyraNarrativeMessage {
  id: string;
  content: string;
  type: 'lyra-unified';
  emotion?: 'warm' | 'encouraging' | 'excited' | 'proud' | 'thoughtful';
  trigger?: string;
  delay?: number;
  context?: 'story' | 'guidance' | 'celebration' | 'reflection';
}

// Types for interactive stages
interface InteractiveStage {
  id: string;
  title: string;
  component: React.ReactNode;
  narrativeMessages: LyraNarrativeMessage[];
  panelBlurState?: 'full' | 'partial' | 'clear';
}

// Tone Profile Types
interface ToneProfile {
  id: string;
  name: string;
  description: string;
  characteristics: string[];
  whenToUse: string[];
  example: {
    situation: string;
    beforeTone: string;
    afterTone: string;
  };
  color: string;
}

// Audience Profile Types
interface AudienceProfile {
  id: string;
  name: string;
  description: string;
  context: string;
  needs: string[];
  communicationStyle: string;
  painPoints: string[];
  preferredTone: string;
}

// Tone Adaptation Exercise
interface ToneExercise {
  id: string;
  scenario: string;
  originalMessage: string;
  audience: string;
  suggestedTone: string;
  adaptedMessage: string;
  whyItWorks: string;
}

const MayaToneMasteryLesson: React.FC = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const [currentStageIndex, setCurrentStageIndex] = useState(0);
  const [visibleMessages, setVisibleMessages] = useState<LyraNarrativeMessage[]>([]);
  const [typedContent, setTypedContent] = useState<{[key: string]: string}>({});
  const [isTyping, setIsTyping] = useState<string | null>(null);
  const [isFastForwarding, setIsFastForwarding] = useState(false);
  const [lyraExpression, setLyraExpression] = useState<'neutral' | 'happy' | 'thoughtful' | 'excited' | 'celebrating'>('neutral');
  // Removed blur state for better UX
  const [userLevel] = useState<'beginner' | 'intermediate' | 'advanced'>('beginner');
  
  // Tone Mastery Journey State
  const [toneMasteryJourney, setToneMasteryJourney] = useState({
    selectedAudience: '',
    selectedTone: '',
    practiceScenario: '',
    adaptedMessage: '',
    completed: false,
    confidenceLevel: 0,
    completedExercises: [] as string[],
    // AI interaction state
    badToneExample: '',
    goodToneExample: '',
    isGeneratingAI: false,
    currentPrompt: '',
    aiResults: null as any,
    // Real AI generation state
    genericResponse: '',
    specificResponse: '',
    aiError: ''
  });

  // Refs for cleanup
  const chatRef = useRef<HTMLDivElement>(null);
  const typewriterTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const messageTimeoutsRef = useRef<NodeJS.Timeout[]>([]);
  const isInitializedRef = useRef(true);
  
  // AI Service instance
  const aiService = MayaAIEmailService.getInstance();
  
  // Generate real AI tone comparison
  const generateToneComparison = async (audience: AudienceProfile) => {
    try {
      const baseScenario = "thanking a volunteer for their help with a community event";
      
      // Generate generic response
      const genericPrompt = {
        purpose: baseScenario,
        audience: "recipient",
        audienceContext: "general person",
        situationDetails: "routine communication",
        tone: "professional",
        aiPrompt: "Write a professional email"
      };
      
      // Generate audience-specific response
      const specificPrompt = {
        purpose: baseScenario,
        audience: audience.name,
        audienceContext: audience.context,
        situationDetails: audience.needs.join(", "),
        tone: audience.preferredTone,
        aiPrompt: `Write a ${audience.preferredTone} email for ${audience.name} who ${audience.context}. Consider their needs: ${audience.needs.join(", ")}`
      };
      
      // Generate both responses in parallel
      const [genericResult, specificResult] = await Promise.all([
        aiService.generateEmailWithPACE(genericPrompt),
        aiService.generateEmailWithPACE(specificPrompt)
      ]);
      
      setToneMasteryJourney(prev => ({
        ...prev,
        isGeneratingAI: false,
        genericResponse: genericResult.email,
        specificResponse: specificResult.email,
        badToneExample: genericResult.email,
        goodToneExample: specificResult.email
      }));
      
      // Advance to next stage after generation
      setTimeout(() => {
        setCurrentStageIndex(2);
      }, 500);
      
    } catch (error) {
      console.error('AI generation failed:', error);
      setToneMasteryJourney(prev => ({
        ...prev,
        isGeneratingAI: false,
        aiError: 'Failed to generate AI examples. Using fallback examples.',
        badToneExample: `Generic email: Thank you for your assistance. Your help was valuable and appreciated.`,
        goodToneExample: `Hi there! I keep thinking about how you jumped in to help yesterday - your energy was infectious and the kids are still talking about you! Thank you for being such a wonderful part of our community family. 💕`
      }));
      
      // Still advance to next stage
      setTimeout(() => {
        setCurrentStageIndex(2);
      }, 500);
    }
  };

  // Tone Profiles for Maya's workshop
  const toneProfiles: ToneProfile[] = [
    {
      id: 'warm-appreciation',
      name: 'Warm Appreciation',
      description: 'For thanking volunteers and celebrating community contributions',
      characteristics: ['Genuine gratitude', 'Personal recognition', 'Emotional warmth', 'Specific acknowledgment'],
      whenToUse: ['Thanking volunteers', 'Celebrating achievements', 'Acknowledging contributions', 'Building relationships'],
      example: {
        situation: 'Thanking a volunteer who helped with an event',
        beforeTone: 'Thank you for your assistance with the event. Your help was valuable.',
        afterTone: 'I keep thinking about how you jumped in to help with the kids yesterday! Your kindness made such a difference - the children were glowing when they talked about you. Thank you for being such a wonderful part of our community family. 💕'
      },
      color: 'bg-pink-100 border-pink-300 text-pink-800'
    },
    {
      id: 'empathetic-support',
      name: 'Empathetic Support',
      description: 'For addressing concerns and providing reassurance to families',
      characteristics: ['Active listening', 'Emotional validation', 'Reassuring presence', 'Solution-focused'],
      whenToUse: ['Addressing concerns', 'Providing reassurance', 'Handling complaints', 'Supporting families'],
      example: {
        situation: 'Responding to a parent\'s concern about their child',
        beforeTone: 'We have reviewed your concern and will address it according to our policies.',
        afterTone: 'I can hear how much you care about your daughter, and I want you to know we share that concern. Let me walk you through exactly what we\'re doing to support her and how we can work together to make sure she feels confident and happy here.'
      },
      color: 'bg-blue-100 border-blue-300 text-blue-800'
    },
    {
      id: 'professional-collaborative',
      name: 'Professional Collaborative',
      description: 'For board communications and formal organizational matters',
      characteristics: ['Clear structure', 'Data-driven', 'Collaborative approach', 'Action-oriented'],
      whenToUse: ['Board communications', 'Formal reports', 'Strategic planning', 'Policy discussions'],
      example: {
        situation: 'Updating the board on program metrics',
        beforeTone: 'Hi everyone, here are the numbers for this quarter. Let me know if you have questions.',
        afterTone: 'Good afternoon board members. I\'m pleased to share our Q3 program metrics, which show strong growth in family engagement (up 23%) and volunteer retention (up 15%). I\'ve included analysis of what\'s driving these improvements and recommendations for scaling our most effective strategies.'
      },
      color: 'bg-purple-100 border-purple-300 text-purple-800'
    },
    {
      id: 'urgent-clear',
      name: 'Urgent but Clear',
      description: 'For time-sensitive communications that require immediate action',
      characteristics: ['Clear urgency', 'Specific action items', 'Calm authority', 'Reassuring clarity'],
      whenToUse: ['Emergency communications', 'Time-sensitive updates', 'Important announcements', 'Crisis management'],
      example: {
        situation: 'Informing families about an emergency closure',
        beforeTone: 'Due to emergency circumstances, we are closing early today.',
        afterTone: 'IMPORTANT UPDATE: Due to a water main break, we need to close at 2 PM today. All children are safe and in supervised care. Please pick up by 2 PM. We expect to reopen tomorrow at normal hours. Call 555-0123 with any questions.'
      },
      color: 'bg-orange-100 border-orange-300 text-orange-800'
    }
  ];

  // Audience Profiles for recognition practice
  const audienceProfiles: AudienceProfile[] = [
    {
      id: 'busy-parent',
      name: 'Busy Parent',
      description: 'Working parent juggling multiple responsibilities',
      context: 'Picking up kids, checking phone quickly between meetings',
      needs: ['Quick, scannable information', 'Warm but efficient tone', 'Clear action items', 'Reassurance about their child'],
      communicationStyle: 'Appreciates brevity but values personal connection',
      painPoints: ['Too much detail', 'Formal, impersonal tone', 'Unclear expectations'],
      preferredTone: 'warm-appreciation'
    },
    {
      id: 'dedicated-volunteer',
      name: 'Dedicated Volunteer',
      description: 'Community member who gives time freely to support programs',
      context: 'Wants to feel valued and understand how their help makes a difference',
      needs: ['Recognition and appreciation', 'Clear direction', 'Sense of impact', 'Respect for their time'],
      communicationStyle: 'Values personal connection and specific feedback',
      painPoints: ['Being taken for granted', 'Vague instructions', 'Lack of appreciation'],
      preferredTone: 'warm-appreciation'
    },
    {
      id: 'board-member',
      name: 'Board Member',
      description: 'Strategic oversight volunteer with limited time',
      context: 'Reviewing multiple organizational updates, focused on impact and efficiency',
      needs: ['Data-driven insights', 'Strategic recommendations', 'Clear next steps', 'Professional presentation'],
      communicationStyle: 'Values structure, brevity, and actionable information',
      painPoints: ['Too much detail', 'Emotional language', 'Unclear metrics'],
      preferredTone: 'professional-collaborative'
    },
    {
      id: 'community-crisis',
      name: 'Community (Emergency)',
      description: 'Families and community members during urgent situations',
      context: 'Anxious about safety, needs immediate clarity and reassurance',
      needs: ['Clear, calm information', 'Specific action steps', 'Reassurance about safety', 'Multiple contact options'],
      communicationStyle: 'Values clarity, authority, and reassurance',
      painPoints: ['Vague information', 'Delayed communication', 'Unclear instructions'],
      preferredTone: 'urgent-clear'
    }
  ];

  // Practice Exercises for tone adaptation
  const toneExercises: ToneExercise[] = [
    {
      id: 'volunteer-thank-you',
      scenario: 'Thanking a volunteer who helped with the community garden project',
      originalMessage: 'Thank you for your assistance with the garden project. Your help was valuable.',
      audience: 'Dedicated Volunteer',
      suggestedTone: 'Warm Appreciation',
      adaptedMessage: 'I keep thinking about how beautiful the garden looks thanks to your hard work yesterday! The kids are already asking when they can help plant the seeds you prepared. Your dedication to our community shows in every flower that will bloom. Thank you for being such an important part of our Hope Gardens family! 🌱',
      whyItWorks: 'This tone acknowledges the volunteer\'s specific contribution, shows the impact of their work, and creates emotional connection through gratitude and community belonging.'
    },
    {
      id: 'parent-concern',
      scenario: 'Responding to a parent\'s concern about their child\'s behavior',
      originalMessage: 'We have reviewed your concern and will address it according to our policies.',
      audience: 'Busy Parent',
      suggestedTone: 'Empathetic Support',
      adaptedMessage: 'I can hear how much you care about Emma, and I want you to know we share that concern. Let me walk you through exactly what we\'re seeing and the specific steps we\'re taking to support her. I\'d love to set up a time to talk about how we can work together to help her feel more confident.',
      whyItWorks: 'This tone validates the parent\'s concern, shows shared commitment to the child, and offers collaborative solutions while maintaining professional support.'
    },
    {
      id: 'board-update',
      scenario: 'Updating the board on program effectiveness and funding needs',
      originalMessage: 'Our programs are doing well. We need more funding to continue.',
      audience: 'Board Member',
      suggestedTone: 'Professional Collaborative',
      adaptedMessage: 'Our Q3 metrics show strong program effectiveness: 85% family retention, 92% volunteer satisfaction, and 78% of families reporting improved outcomes. To maintain this momentum and serve our 40-family waitlist, we need $15K additional funding. I\'ve prepared three scaling options for your consideration.',
      whyItWorks: 'This tone provides specific data, demonstrates impact, clearly states needs, and offers strategic options for board decision-making.'
    },
    {
      id: 'emergency-closure',
      scenario: 'Informing families about an unexpected program closure',
      originalMessage: 'Due to emergency circumstances, we are closing early today.',
      audience: 'Community (Emergency)',
      suggestedTone: 'Urgent but Clear',
      adaptedMessage: 'IMPORTANT UPDATE: Due to a water main break, we need to close at 2 PM today. All children are safe and in supervised care. Please pick up by 2 PM. We expect to reopen tomorrow at normal hours. Questions? Call 555-0123. Thank you for your understanding.',
      whyItWorks: 'This tone provides clear urgency, specific action items, safety reassurance, and contact information while maintaining calm authority.'
    }
  ];

  // Fast forward function
  const handleFastForward = () => {
    setIsFastForwarding(true);
    
    // Clear all timeouts
    messageTimeoutsRef.current.forEach(clearTimeout);
    messageTimeoutsRef.current = [];
    if (typewriterTimeoutRef.current) {
      clearTimeout(typewriterTimeoutRef.current);
    }
    
    // Show all messages instantly
    const currentMessages = currentStage.narrativeMessages || [];
    const newVisibleMessages = currentMessages.filter(msg => !visibleMessages.find(v => v.id === msg.id));
    
    setVisibleMessages(prev => [...prev, ...newVisibleMessages]);
    
    // Complete all typing instantly
    const newTypedContent: {[key: string]: string} = {};
    currentMessages.forEach(message => {
      const content = message.layers?.[userLevel] || message.content;
      newTypedContent[message.id] = content;
    });
    setTypedContent(prev => ({ ...prev, ...newTypedContent }));
    setIsTyping(null);
    
    // Handle final stage state
    const lastMessage = currentMessages[currentMessages.length - 1];
    if (lastMessage?.trigger) {
      // Ready for next stage
    }
    
    // Reset fast-forward state
    setTimeout(() => setIsFastForwarding(false), 500);
  };

  // Typewriter effect for messages
  const typeMessage = React.useCallback((message: LyraNarrativeMessage, onComplete?: () => void) => {
    if (!message.content) return;

    const content = message.layers?.[userLevel] || message.content;
    let charIndex = 0;
    setIsTyping(message.id);

    const typeChar = () => {
      if (charIndex < content.length) {
        setTypedContent(prev => ({
          ...prev,
          [message.id]: content.slice(0, charIndex + 1)
        }));
        charIndex++;
        typewriterTimeoutRef.current = setTimeout(typeChar, 30);
      } else {
        setIsTyping(null);
        
        // Handle stage progression triggers
        if (message.trigger) {
          // Stage can advance when narrative completes
        }
        
        if (onComplete) {
          setTimeout(onComplete, 600);
        }
      }
    };

    typewriterTimeoutRef.current = setTimeout(typeChar, 100);
  }, [userLevel]);

  // Process messages sequentially
  const processMessages = React.useCallback((messages: LyraNarrativeMessage[], index: number = 0) => {
    if (!messages || index >= messages.length) return;

    const message = messages[index];
    if (!message) return;
    
    const delay = index === 0 ? (message.delay || 500) : 0;

    const timeoutId = setTimeout(() => {
      setVisibleMessages(prev => {
        const exists = prev.find(m => m.id === message.id);
        if (exists) return prev;
        return [...prev, message];
      });
      
      typeMessage(message, () => {
        processMessages(messages, index + 1);
      });
    }, delay);

    messageTimeoutsRef.current.push(timeoutId);
  }, [typeMessage]);

  // Tone Mastery Stages
  const stages = React.useMemo<InteractiveStage[]>(() => [
    // Stage 1: Introduction to Tone Mastery
    {
      id: 'intro',
      title: 'Maya\'s Tone Discovery',
      panelBlurState: 'clear',
      component: (
        <div className="flex flex-col items-center justify-center h-full text-center p-8 transition-all duration-1000">
          <motion.div 
            initial={{ scale: 0, rotate: -180 }}
            animate={{ scale: 1, rotate: 0 }}
            transition={{ duration: 0.8, type: "spring", bounce: 0.4 }}
            className="w-20 h-20 rounded-full bg-gradient-to-br from-pink-400 to-purple-400 flex items-center justify-center mb-6 shadow-lg"
          >
            <motion.div
              animate={{ scale: [1, 1.1, 1] }}
              transition={{ duration: 2, repeat: Infinity }}
            >
              <Heart className="w-10 h-10 text-white" />
            </motion.div>
          </motion.div>
          <h2 className="text-2xl font-semibold mb-4">Tone Mastery Workshop</h2>
          <p className="text-gray-600 mb-8 max-w-md">
            Discover how Maya learned to adapt her voice<br/>
            for different audiences with authenticity
          </p>
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 1, duration: 0.6 }}
          >
            <Button 
              onClick={() => {
                setCurrentStageIndex(1);
              }}
              className="bg-gradient-to-r from-pink-600 to-purple-600 hover:from-pink-700 hover:to-purple-700 transform hover:scale-105 transition-all duration-200"
            >
              Begin Maya's Journey <ChevronRight className="w-4 h-4 ml-2" />
            </Button>
          </motion.div>
        </div>
      ),
      narrativeMessages: [
        {
          id: 'intro-1',
          content: "Maya thought she had one voice - professional and polite. But when a volunteer felt unappreciated and a parent complained her emails were 'too cold,' she realized something was missing.",
          type: 'lyra-unified',
          context: 'story',
          emotion: 'thoughtful',
          delay: 500
        },
        {
          id: 'intro-2',
          content: "The same message delivered in different tones creates completely different relationships. Maya was about to discover that tone mastery isn't about being fake - it's about being appropriately authentic.",
          type: 'lyra-unified',
          context: 'story',
          emotion: 'encouraging',
          delay: 1000
        },
        {
          id: 'intro-3',
          content: "Watch how Maya's understanding comes into focus as she learns that great communicators don't have multiple personalities - they have the wisdom to match their authentic self to their audience's needs.",
          type: 'lyra-unified',
          context: 'guidance',
          emotion: 'excited',
          delay: 1500,
          trigger: 'stage-advance'
        }
      ]
    },

    // Stage 2: Audience Recognition Workshop with AI Demo
    {
      id: 'audience-recognition',
      title: 'Audience Recognition Workshop',
      panelBlurState: 'clear',
      component: (
        <div className="p-8 transition-all duration-1000">
          <div className="mb-6">
            <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
              <Users className="w-6 h-6 text-purple-600" />
              Know Your Audience
            </h3>
            <p className="text-gray-600 mb-6">
              Maya's first breakthrough: Different people need different approaches. Choose an audience to see AI examples:
            </p>
          </div>
          
          <div className="space-y-4">
            {audienceProfiles.map((audience) => (
              <Card 
                key={audience.id}
                className={cn(
                  "cursor-pointer transition-all duration-200 hover:shadow-md",
                  toneMasteryJourney.selectedAudience === audience.id ? 'ring-2 ring-purple-500 bg-purple-50' : 'hover:bg-gray-50'
                )}
                onClick={() => {
                  setToneMasteryJourney(prev => ({ 
                    ...prev, 
                    selectedAudience: audience.id,
                    isGeneratingAI: true,
                    currentPrompt: `Generate a tone example for ${audience.name}`,
                    aiError: ''
                  }));
                  
                  // Generate real AI examples
                  generateToneComparison(audience);
                  setLyraExpression('celebrating');
                  // AI generation will handle the state update
                }}
              >
                <CardContent className="p-4">
                  <div className="flex items-start gap-3">
                    <div className="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center">
                      <Users className="w-4 h-4 text-purple-600" />
                    </div>
                    <div className="flex-1">
                      <h4 className="font-semibold text-gray-900">{audience.name}</h4>
                      <p className="text-sm text-gray-600 mb-2">{audience.description}</p>
                      <p className="text-xs text-gray-500 mb-2">{audience.context}</p>
                      <div className="flex flex-wrap gap-1">
                        {audience.needs.slice(0, 2).map((need, index) => (
                          <Badge key={index} variant="secondary" className="text-xs">
                            {need}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
          
          {toneMasteryJourney.isGeneratingAI && (
            <div className="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
              <div className="flex items-center gap-2 mb-2">
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-purple-600"></div>
                <span className="text-sm font-medium">Generating real AI examples...</span>
              </div>
              <p className="text-xs text-blue-700">Creating both generic and audience-specific responses using live AI</p>
            </div>
          )}
          
          {toneMasteryJourney.aiError && (
            <div className="mt-6 p-4 bg-yellow-50 rounded-lg border border-yellow-200">
              <p className="text-sm text-yellow-800">{toneMasteryJourney.aiError}</p>
            </div>
          )}
        </div>
      ),
      narrativeMessages: [
        {
          id: 'recognition-1',
          content: "Maya's breakthrough came when she stopped thinking about 'professional vs. casual' and started thinking about 'what does this person need from me right now?'",
          type: 'lyra-unified',
          context: 'story',
          emotion: 'thoughtful',
          delay: 500
        },
        {
          id: 'recognition-2',
          content: "An exhausted parent at pickup doesn't need the same tone as a board member reviewing quarterly reports. It's not about being fake - it's about being considerate.",
          type: 'lyra-unified',
          context: 'guidance',
          emotion: 'encouraging',
          delay: 1000
        },
        {
          id: 'recognition-3',
          content: "Choose an audience to understand their world. Maya learned that great communication starts with truly seeing your audience.",
          type: 'lyra-unified',
          context: 'guidance',
          emotion: 'encouraging',
          delay: 1500
        }
      ]
    },

    // Stage 3: AI Tone Comparison Demo
    {
      id: 'tone-comparison',
      title: 'AI Tone Comparison Demo',
      panelBlurState: 'clear',
      component: (
        <div className="p-8">
          <div className="mb-6">
            <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
              <Zap className="w-6 h-6 text-yellow-600" />
              See the Tone Difference
            </h3>
            <p className="text-gray-600 mb-6">
              Watch how Maya's AI prompts create dramatically different results. Same message, different tones.
            </p>
          </div>
          
          {toneMasteryJourney.selectedAudience && (
            <div className="space-y-6">
              {toneMasteryJourney.isGeneratingAI && (
                <Card className="border-blue-200 bg-blue-50">
                  <CardContent className="p-6">
                    <div className="flex items-center gap-3 mb-4">
                      <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
                      <h3 className="font-semibold text-blue-800">Generating Real AI Comparison...</h3>
                    </div>
                    <div className="space-y-2 text-sm text-blue-700">
                      <p>• Creating generic AI response with basic prompt</p>
                      <p>• Creating audience-specific response with Maya's technique</p>
                      <p>• Comparing results to show the difference</p>
                    </div>
                  </CardContent>
                </Card>
              )}
              
              {!toneMasteryJourney.isGeneratingAI && (toneMasteryJourney.genericResponse || toneMasteryJourney.badToneExample) && (
                <>
                  {/* Bad Tone Example */}
              <Card className="border-red-200 bg-red-50">
                <CardHeader>
                  <CardTitle className="text-red-800 flex items-center gap-2">
                    <X className="w-5 h-5" />
                    ❌ Generic Tone (What NOT to do)
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="mb-3">
                    <Badge variant="outline" className="text-xs mb-2">Bad Prompt</Badge>
                    <p className="text-sm text-gray-600 bg-white p-2 rounded border italic">
                      "Write a professional email" <span className="text-red-600">(No audience context!)</span>
                    </p>
                  </div>
                  <div>
                    <Badge variant="outline" className="text-xs mb-2">AI Result</Badge>
                    <p className="text-sm bg-white p-3 rounded border">
                      {toneMasteryJourney.genericResponse || toneMasteryJourney.badToneExample || 'Generating...'}
                    </p>
                  </div>
                </CardContent>
              </Card>
              
              {/* Good Tone Example */}
              <Card className="border-green-200 bg-green-50">
                <CardHeader>
                  <CardTitle className="text-green-800 flex items-center gap-2">
                    <Check className="w-5 h-5" />
                    ✅ Audience-Specific Tone (Maya's Way)
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="mb-3">
                    <Badge variant="outline" className="text-xs mb-2">Smart Prompt</Badge>
                    <p className="text-sm text-gray-600 bg-white p-2 rounded border italic">
                      "Write a {audienceProfiles.find(a => a.id === toneMasteryJourney.selectedAudience)?.preferredTone} email for {audienceProfiles.find(a => a.id === toneMasteryJourney.selectedAudience)?.name} who {audienceProfiles.find(a => a.id === toneMasteryJourney.selectedAudience)?.context}" <span className="text-green-600">(Audience-specific!)</span>
                    </p>
                  </div>
                  <div>
                    <Badge variant="outline" className="text-xs mb-2">AI Result</Badge>
                    <p className="text-sm bg-white p-3 rounded border">
                      {toneMasteryJourney.specificResponse || toneMasteryJourney.goodToneExample || 'Generating...'}
                    </p>
                  </div>
                </CardContent>
              </Card>
              
                <Card className="border-green-200 bg-green-50">
                  <CardContent className="p-4">
                    <div className="flex items-center gap-2 mb-2">
                      <Check className="w-5 h-5 text-green-600" />
                      <span className="font-semibold text-green-800">AI Generation Complete!</span>
                    </div>
                    <p className="text-sm text-green-700">
                      See how different prompts create dramatically different results from the same AI.
                    </p>
                  </CardContent>
                </Card>
                
                <Button 
                  onClick={() => setCurrentStageIndex(3)}
                  className="w-full bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700"
                >
                  Continue to Practice <ChevronRight className="w-4 h-4 ml-2" />
                </Button>
              )}
            </div>
          )}
        </div>
      ),
      narrativeMessages: [
        {
          id: 'comparison-1',
          content: "Here's where Maya's breakthrough happened - she realized generic AI prompts create generic responses. But audience-specific prompts? They create connection magic.",
          type: 'lyra-unified',
          context: 'story',
          emotion: 'thoughtful',
          delay: 500
        },
        {
          id: 'comparison-2',
          content: "Look at the difference! The same AI, the same basic request, but completely different results. Maya learned that teaching AI about your audience is just as important as knowing your audience yourself.",
          type: 'lyra-unified',
          context: 'guidance',
          emotion: 'encouraging',
          delay: 1000
        },
        {
          id: 'comparison-3',
          content: "This is the power of Maya's system - turning AI from a generic writing tool into a relationship-building partner. Notice how the audience-specific version feels completely different?",
          type: 'lyra-unified',
          context: 'guidance',
          emotion: 'encouraging',
          delay: 1500
        }
      ]
    },

    // Stage 4: Interactive Tone Practice
    {
      id: 'interactive-practice',
      title: 'Interactive Tone Practice',
      panelBlurState: 'clear',
      component: (
        <div className="p-8">
          <div className="mb-6">
            <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
              <Zap className="w-6 h-6 text-yellow-600" />
              See the Transformation
            </h3>
            <p className="text-gray-600 mb-6">
              Watch how Maya transforms the same message for different audiences. Choose a practice scenario:
            </p>
          </div>
          
          <div className="space-y-4">
            {toneExercises.map((exercise) => (
              <Card 
                key={exercise.id}
                className={cn(
                  "cursor-pointer transition-all duration-200 hover:shadow-md",
                  toneMasteryJourney.practiceScenario === exercise.id ? 'ring-2 ring-yellow-500 bg-yellow-50' : 'hover:bg-gray-50'
                )}
                onClick={() => {
                  setToneMasteryJourney(prev => ({ 
                    ...prev, 
                    practiceScenario: exercise.id,
                    adaptedMessage: exercise.adaptedMessage 
                  }));
                  setLyraExpression('celebrating');
                  setTimeout(() => {
                    setCurrentStageIndex(4);
                  }, 1500);
                }}
              >
                <CardContent className="p-4">
                  <div className="flex items-start gap-3">
                    <div className="w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center">
                      <MessageCircle className="w-4 h-4 text-yellow-600" />
                    </div>
                    <div className="flex-1">
                      <h4 className="font-semibold text-gray-900 mb-2">{exercise.scenario}</h4>
                      <div className="space-y-2">
                        <div>
                          <Badge variant="outline" className="text-xs mb-1">Original</Badge>
                          <p className="text-xs text-gray-600 bg-gray-50 p-2 rounded">
                            {exercise.originalMessage}
                          </p>
                        </div>
                        <div>
                          <Badge variant="outline" className="text-xs mb-1">Audience: {exercise.audience}</Badge>
                          <Badge variant="outline" className="text-xs mb-1 ml-2">Tone: {exercise.suggestedTone}</Badge>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      ),
      narrativeMessages: [
        {
          id: 'practice-1',
          content: "Perfect! Now you'll see Maya's secret weapon - comparing generic AI responses with audience-specific prompts. This is where the magic happens.",
          type: 'lyra-unified',
          context: 'story',
          emotion: 'excited',
          delay: 500
        },
        {
          id: 'practice-2',
          content: "Maya learned that the same scenario can create completely different responses depending on how you prompt the AI. Generic prompts get generic results. Specific, audience-aware prompts get connection.",
          type: 'lyra-unified',
          context: 'guidance',
          emotion: 'thoughtful',
          delay: 1000
        },
        {
          id: 'practice-3',
          content: "Choose a scenario to practice Maya's technique. You'll see both the 'before' and 'after' - how audience-specific AI prompts create dramatically better results.",
          type: 'lyra-unified',
          context: 'guidance',
          emotion: 'encouraging',
          delay: 1500
        }
      ]
    },

    // Stage 5: Transformation Results
    {
      id: 'results',
      title: 'Maya\'s Transformation Results',
      panelBlurState: 'clear',
      component: (
        <div className="p-8">
          <div className="mb-6">
            <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
              <Star className="w-6 h-6 text-green-600" />
              Your Tone Mastery Complete!
            </h3>
          </div>
          
          {toneMasteryJourney.practiceScenario && (
            <div className="space-y-6">
              {/* Selected Exercise Results */}
              {(() => {
                const selectedExercise = toneExercises.find(ex => ex.id === toneMasteryJourney.practiceScenario);
                if (!selectedExercise) return null;
                
                return (
                  <Card className="bg-gradient-to-r from-green-50 to-emerald-50 border-green-200">
                    <CardHeader>
                      <CardTitle className="text-lg text-green-800">
                        Transformation Complete: {selectedExercise.scenario}
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div>
                        <Badge variant="outline" className="mb-2">Maya's Adapted Message</Badge>
                        <p className="text-sm bg-white p-3 rounded border border-green-200">
                          {selectedExercise.adaptedMessage}
                        </p>
                      </div>
                      <div>
                        <Badge variant="outline" className="mb-2">Why This Works</Badge>
                        <p className="text-sm text-green-700">
                          {selectedExercise.whyItWorks}
                        </p>
                      </div>
                    </CardContent>
                  </Card>
                );
              })()}
              
              {/* Save to Toolkit */}
              <Card className="bg-gradient-to-r from-purple-50 to-pink-50 border-purple-200">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="font-semibold text-purple-800 mb-2">Save Your Tone Mastery</h4>
                      <p className="text-sm text-purple-600">
                        Keep this tone adaptation example in your toolkit for future reference
                      </p>
                    </div>
                    <SaveToToolkit
                      dynamicPath={{
                        purpose: 'tone-mastery-training',
                        audience: { label: 'Personal Learning', id: 'learning' },
                        content: { name: 'Tone Mastery Workshop Results' },
                        execute: { executionType: 'balanced' }
                      }}
                      emailContent={toneMasteryJourney.adaptedMessage}
                      promptBuilder={{
                        purpose: 'Master tone adaptation for different audiences',
                        audience: 'Personal learning and development',
                        content: 'Tone mastery workshop results and examples',
                        execute: 'Apply authentic tone adaptation techniques'
                      }}
                    />
                  </div>
                </CardContent>
              </Card>
              
              {/* Maya's Progress Summary */}
              <Card className="bg-gradient-to-r from-pink-50 to-purple-50 border-pink-200">
                <CardContent className="p-6">
                  <h4 className="font-semibold mb-4 text-pink-800">🎉 Maya's Communication Mastery</h4>
                  <div className="grid md:grid-cols-2 gap-4 text-sm">
                    <div className="space-y-2">
                      <div><strong>Audience Understanding:</strong> Recognizes different communication needs</div>
                      <div><strong>Tone Adaptation:</strong> Matches authentic voice to audience</div>
                      <div><strong>Relationship Building:</strong> Creates connection through appropriate tone</div>
                    </div>
                    <div className="space-y-2">
                      <div><strong>Volunteer Appreciation:</strong> Warm, personal recognition</div>
                      <div><strong>Parent Support:</strong> Empathetic, reassuring communication</div>
                      <div><strong>Board Communications:</strong> Professional, data-driven updates</div>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              {/* Next Steps */}
              <div className="flex gap-4">
                <Button 
                  onClick={() => navigate('/chapter/2/lesson/5')}
                  variant="outline"
                  className="flex-1"
                >
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  Back to Hub
                </Button>
                <Button 
                  onClick={() => navigate('/chapter/2/lesson/5/template-library')}
                  className="flex-1 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
                >
                  Next: Template Library
                  <ChevronRight className="w-4 h-4 ml-2" />
                </Button>
              </div>
            </div>
          )}
        </div>
      ),
      narrativeMessages: [
        {
          id: 'mastery-1',
          content: "🎆 Congratulations! You've mastered Maya's complete tone adaptation system. From generic AI responses to audience-specific perfection - you now have the skills that transformed Maya's entire communication approach.",
          type: 'lyra-unified',
          context: 'celebration',
          emotion: 'proud',
          delay: 500
        },
        {
          id: 'mastery-2',
          content: "Maya's secret wasn't just knowing her audiences - it was teaching AI to understand them too. The same prompt techniques that saved her hours every day while building stronger relationships.",
          type: 'lyra-unified',
          context: 'reflection',
          emotion: 'thoughtful',
          delay: 1000
        },
        {
          id: 'mastery-3',
          content: "You now have Maya's complete tone mastery toolkit: audience recognition, AI prompt engineering, and authentic adaptation. These skills will transform every professional relationship you build. Ready to add templates to your arsenal?",
          type: 'lyra-unified',
          context: 'celebration',
          emotion: 'excited',
          delay: 1500
        }
      ]
    }
  ], [toneMasteryJourney, navigate]);

  const currentStage = stages[currentStageIndex] || stages[0];

  // Load messages when stage changes
  useEffect(() => {
    if (currentStage && currentStage.narrativeMessages) {
      processMessages(currentStage.narrativeMessages);
    }
  }, [currentStageIndex, processMessages, currentStage]);

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      messageTimeoutsRef.current.forEach(clearTimeout);
      if (typewriterTimeoutRef.current) {
        clearTimeout(typewriterTimeoutRef.current);
      }
    };
  }, []);

  // Auto-scroll chat
  useEffect(() => {
    if (chatRef.current) {
      chatRef.current.scrollTop = chatRef.current.scrollHeight;
    }
  }, [visibleMessages, typedContent]);

  return (
    <div className="h-screen bg-gradient-to-br from-pink-50 via-white to-purple-50 flex flex-col">
      <div className="flex-1 flex flex-col max-w-7xl mx-auto w-full shadow-xl bg-white">
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b bg-white">
          <div className="flex items-center gap-3">
            <LyraAvatar size="sm" expression={lyraExpression} animated />
            <div>
              <h1 className="font-semibold">Maya's Tone Mastery Workshop</h1>
              <p className="text-sm text-gray-600">Master authentic tone adaptation for any audience</p>
            </div>
          </div>
          <div className="flex items-center gap-4">
            <Button
              onClick={() => navigate('/chapter/2/lesson/5')}
              variant="outline"
              size="sm"
            >
              <ArrowLeft className="w-4 h-4 mr-1" />
              Hub
            </Button>
            <div className="flex items-center gap-2">
              <Button
                onClick={handleFastForward}
                variant="outline"
                size="sm"
                disabled={isFastForwarding || !isTyping}
                className="text-xs"
              >
                <FastForward className="w-3 h-3 mr-1" />
                {isFastForwarding ? 'Skipping...' : 'Fast Forward'}
              </Button>
              <div className="text-gray-500 text-sm">
                Step {currentStageIndex + 1} of {stages.length}
              </div>
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="flex-1 flex flex-col lg:flex-row overflow-hidden">
          {/* Lyra's Narrative Panel */}
          <div className="w-full lg:w-1/2 border-r-0 lg:border-r border-b lg:border-b-0 flex flex-col bg-white">
            <div className="p-4 border-b bg-gradient-to-r from-pink-50 to-purple-50">
              <h2 className="font-medium text-purple-900 flex items-center gap-2">
                <Sparkles className="w-4 h-4" />
                Lyra's Tone Journey
              </h2>
            </div>
            <div ref={chatRef} className="flex-1 overflow-y-auto p-4 space-y-4">
              {visibleMessages.map((message) => (
                <div key={message.id}>
                  <div className="flex gap-3">
                    <LyraAvatar size="sm" expression={lyraExpression} animated={isTyping === message.id} />
                    <div className="flex-1">
                      <div className={cn(
                        "rounded-lg p-4 border-l-4 transition-all duration-300",
                        message.context === 'story' && "bg-gradient-to-r from-pink-50 to-purple-50 border-pink-400",
                        message.context === 'guidance' && "bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-400",
                        message.context === 'celebration' && "bg-gradient-to-r from-green-50 to-emerald-50 border-green-400",
                        message.context === 'reflection' && "bg-gradient-to-r from-amber-50 to-orange-50 border-amber-400",
                        !message.context && "bg-gradient-to-r from-pink-50 to-purple-50 border-pink-400"
                      )}>
                        <div className={cn(
                          "whitespace-pre-wrap",
                          message.context === 'celebration' && "font-medium text-green-800",
                          message.context === 'guidance' && "text-blue-800",
                          message.context === 'reflection' && "text-amber-800",
                          (!message.context || message.context === 'story') && "text-gray-700"
                        )}>
                          {typedContent[message.id] || ''}
                          {isTyping === message.id && (
                            <span className="inline-block w-0.5 h-5 ml-1 animate-pulse bg-pink-500" />
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Interactive Panel */}
          <div className="w-full lg:w-1/2 flex flex-col bg-gradient-to-br from-pink-50/50 to-purple-50/50">
            <div className="p-4 border-b bg-white/80">
              <h2 className="font-medium flex items-center gap-2">
                <Heart className="w-4 h-4 text-pink-600" />
                {currentStage.title}
              </h2>
            </div>
            <div className="flex-1 overflow-y-auto relative">
              {/* Blur effects removed for better UX */}
              {currentStage.component}
            </div>
          </div>
        </div>

        {/* Progress Bar */}
        <div className="h-3 bg-gray-200 relative overflow-hidden">
          <motion.div 
            className="h-full bg-gradient-to-r from-pink-600 via-purple-500 to-pink-600 relative"
            initial={{ width: 0 }}
            animate={{ width: `${((currentStageIndex + 1) / stages.length) * 100}%` }}
            transition={{ duration: 0.8, ease: "easeInOut" }}
          />
        </div>
      </div>
    </div>
  );
};

export default MayaToneMasteryLesson;