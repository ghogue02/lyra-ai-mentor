import React, { Component, ReactNode, ErrorInfo } from 'react';\n\ninterface Props {\n  children: ReactNode;\n  maxRetries?: number;\n  onError?: (error: Error, errorInfo: ErrorInfo) => void;\n}\n\ninterface State {\n  hasError: boolean;\n  error: Error | null;\n  errorInfo: ErrorInfo | null;\n  retryCount: number;\n}\n\nclass ReactContextErrorBoundary extends Component<Props, State> {\n  private retryTimeout: NodeJS.Timeout | null = null;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null,\n      retryCount: 0\n    };\n  }\n\n  static getDerivedStateFromError(error: Error): Partial<State> {\n    return {\n      hasError: true,\n      error\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    const { onError } = this.props;\n    \n    this.setState({\n      error,\n      errorInfo,\n      retryCount: this.state.retryCount + 1\n    });\n\n    console.error('[React Context Error Boundary] Caught error:', error);\n    console.error('[React Context Error Boundary] Error info:', errorInfo);\n\n    if (onError) {\n      onError(error, errorInfo);\n    }\n\n    // Auto-retry for React context errors\n    this.scheduleRetry();\n  }\n\n  private scheduleRetry = () => {\n    const { maxRetries = 3 } = this.props;\n    const { retryCount } = this.state;\n\n    if (retryCount < maxRetries) {\n      const delay = Math.min(1000 * Math.pow(2, retryCount), 10000); // Exponential backoff, max 10s\n      \n      console.log(`[React Context Error Boundary] Scheduling retry ${retryCount + 1}/${maxRetries} in ${delay}ms`);\n      \n      this.retryTimeout = setTimeout(() => {\n        this.handleRetry();\n      }, delay);\n    }\n  };\n\n  private handleRetry = () => {\n    console.log('[React Context Error Boundary] Attempting retry...');\n    \n    this.setState({\n      hasError: false,\n      error: null,\n      errorInfo: null\n    });\n  };\n\n  private handleManualRetry = () => {\n    this.setState({\n      hasError: false,\n      error: null,\n      errorInfo: null,\n      retryCount: 0\n    });\n  };\n\n  componentWillUnmount() {\n    if (this.retryTimeout) {\n      clearTimeout(this.retryTimeout);\n    }\n  }\n\n  render() {\n    const { hasError, error, errorInfo, retryCount } = this.state;\n    const { children, maxRetries = 3 } = this.props;\n\n    if (hasError && error) {\n      const isMaxRetriesExceeded = retryCount >= maxRetries;\n      \n      return (\n        <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 text-white p-6\">\n          <div className=\"max-w-md w-full bg-white/10 backdrop-blur-lg rounded-2xl p-8 border border-white/20\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 mx-auto mb-4 bg-red-500/20 rounded-full flex items-center justify-center\">\n                <svg className=\"w-8 h-8 text-red-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n              </div>\n              \n              <h1 className=\"text-2xl font-bold mb-2\">\n                {isMaxRetriesExceeded ? 'Application Error' : 'Loading Issue'}\n              </h1>\n              \n              <p className=\"text-white/80 mb-6\">\n                {isMaxRetriesExceeded \n                  ? 'We encountered an error that prevents the app from loading properly.'\n                  : `Retrying... (${retryCount}/${maxRetries})`\n                }\n              </p>\n\n              {isMaxRetriesExceeded && (\n                <>\n                  <div className=\"text-left bg-black/20 rounded-lg p-4 mb-6 text-sm\">\n                    <details className=\"cursor-pointer\">\n                      <summary className=\"font-semibold mb-2 text-yellow-300\">\n                        Technical Details\n                      </summary>\n                      <div className=\"space-y-2 text-white/70\">\n                        <div>\n                          <strong>Error:</strong> {error.message}\n                        </div>\n                        {errorInfo && (\n                          <div>\n                            <strong>Component Stack:</strong>\n                            <pre className=\"text-xs mt-1 whitespace-pre-wrap\">\n                              {errorInfo.componentStack}\n                            </pre>\n                          </div>\n                        )}\n                      </div>\n                    </details>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <button\n                      onClick={this.handleManualRetry}\n                      className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors\"\n                    >\n                      Try Again\n                    </button>\n                    \n                    <button\n                      onClick={() => window.location.reload()}\n                      className=\"w-full bg-gray-600 hover:bg-gray-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors\"\n                    >\n                      Reload Page\n                    </button>\n                  </div>\n                </>\n              )}\n\n              {!isMaxRetriesExceeded && (\n                <div className=\"flex justify-center\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white\"></div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return children;\n  }\n}\n\nexport default ReactContextErrorBoundary;\n